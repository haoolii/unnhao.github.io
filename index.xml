<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hao&#39;s Blog</title>
    <link>https://unnhao.github.io/</link>
    <description>Recent content on Hao&#39;s Blog</description>
    <image>
      <url>https://unnhao.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://unnhao.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 28 Feb 2022 22:16:21 +0800</lastBuildDate><atom:link href="https://unnhao.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Graphql 基本安裝與使用</title>
      <link>https://unnhao.github.io/posts/graphql-basic-usage/</link>
      <pubDate>Mon, 28 Feb 2022 22:16:21 +0800</pubDate>
      
      <guid>https://unnhao.github.io/posts/graphql-basic-usage/</guid>
      <description>概述 建構基本 Graphql 專案，單純筆記初始化流程與大致使用流程。
安裝 初始化 npm 專案
npm init -y 安裝相依套件
 apollo-server Apollo 伺服器的核心 graphql 用於建構 GraphQL Schema 和 執行 Query  npm install apollo-server graphql touch index.js 定義 GraphQL Schema 定義 Query與 Mutation，驚嘆號為不為 null
const typeDefs = gql` type Book { title: String author: String } type Query { books: [Book]! } input newBookInput { title: String! author: String! } type Mutation { newBook(input: newBookInput!): Book! } `; 定義資料 此處定義假資料，一般為 DB 連結，或是其他連線。</description>
    </item>
    
    <item>
      <title>初探 Truffle</title>
      <link>https://unnhao.github.io/posts/truffle-intro/</link>
      <pubDate>Sat, 12 Feb 2022 16:04:48 +0800</pubDate>
      
      <guid>https://unnhao.github.io/posts/truffle-intro/</guid>
      <description>初探 Truffle 筆記，安裝、部署、測試相關指令</description>
    </item>
    
  </channel>
</rss>
